{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Dataset Overview\n\nlet check overview of the dataset.","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-25T18:52:29.461150Z","iopub.status.idle":"2024-08-25T18:52:29.461698Z","shell.execute_reply.started":"2024-08-25T18:52:29.461423Z","shell.execute_reply":"2024-08-25T18:52:29.461445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/input/playground-series-s4e8/train.csv')\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:29.463564Z","iopub.status.idle":"2024-08-25T18:52:29.464159Z","shell.execute_reply.started":"2024-08-25T18:52:29.463836Z","shell.execute_reply":"2024-08-25T18:52:29.463858Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.drop_duplicates(inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:29.465853Z","iopub.status.idle":"2024-08-25T18:52:29.466432Z","shell.execute_reply.started":"2024-08-25T18:52:29.466155Z","shell.execute_reply":"2024-08-25T18:52:29.466177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# train_df.head().T","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:03.094753Z","iopub.execute_input":"2024-08-25T18:52:03.095223Z","iopub.status.idle":"2024-08-25T18:52:03.100845Z","shell.execute_reply.started":"2024-08-25T18:52:03.095182Z","shell.execute_reply":"2024-08-25T18:52:03.099196Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"#Target Distribution\n# train_df['class'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:03.102466Z","iopub.execute_input":"2024-08-25T18:52:03.102911Z","iopub.status.idle":"2024-08-25T18:52:03.116351Z","shell.execute_reply.started":"2024-08-25T18:52:03.102871Z","shell.execute_reply":"2024-08-25T18:52:03.114803Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"#Data Summary\n# train_df.describe(include='all').T","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:03.118214Z","iopub.execute_input":"2024-08-25T18:52:03.119129Z","iopub.status.idle":"2024-08-25T18:52:03.129200Z","shell.execute_reply.started":"2024-08-25T18:52:03.119082Z","shell.execute_reply":"2024-08-25T18:52:03.128005Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"# Clean Dataset\nDataset contain a lot of contrived values and so let try clean and see the result.","metadata":{}},{"cell_type":"code","source":"#get outlier limit\ndef get_outlier_range(sr):\n    Q3 = sr.quantile(0.75)\n    Q1 = sr.quantile(0.25)\n    IQR = Q3-Q1\n    upper = Q3+(1.5*IQR)\n    lower = Q1-(1.5*IQR)\n    return lower,upper\n\n\n#let define some helper function\ndef clean_data(df):\n    #feature columns\n    if 'class' in df.columns:\n        df = df.drop(columns=['id','veil-type'])\n        feat_cols = df.drop(columns=['class']).columns\n\n#         modify target data to numerical \n        df['class'],_ = df['class'].factorize()\n        \n    else:\n        df = df.drop(columns=['veil-type'])\n        feat_cols = df.drop(columns='id').columns\n    \n    #category columns\n    cat_cols = set([x if y=='object' else np.nan for x,y in zip(feat_cols,df[feat_cols].dtypes)])\n    cat_cols.remove(np.nan)\n    cat_cols = list(cat_cols)\n    cat_cols.sort()\n    \n    #numerial columns\n    num_cols = df[feat_cols].drop(columns=cat_cols).columns\n    \n    #replace missing values with np.nan\n    df = df.fillna(np.nan)\n    \n    \n    #get dictionay of relevant values \n    values ={}\n    for col in cat_cols:\n#         values[col] = list(df[col].value_counts().apply(lambda x : x if x >100 else np.nan).dropna().index)+['missing']\n        values[col] = list(df[col].value_counts().apply(lambda x : x if x >100 else np.nan).dropna().index)+[np.nan]\n        \n\n    #modify values with non-relevant values\n    for col in cat_cols:\n#         df[col] = df[col].fillna('missing')\n        df.loc[~df[col].isin(values[col]),col]=np.nan\n    \n#     #get upper_limit values\n#     upper_list = {}\n#     for col in num_cols:\n#         _,upper_list[col]= get_outlier_range(df[col])\n\n        \n        \n    #remove rows with outlier values\n    for col in num_cols:\n        df[col] = pd.qcut(df[col],7,duplicates='drop')\n        \n#     for col in feat_cols:\n#         df[col],_ = pd.factorize(df[col],use_na_sentinel=True)\n    \n\n    one_hot = pd.get_dummies(df[feat_cols],dummy_na=False,dtype=np.uint8)\n    df = pd.concat([df.drop(columns=feat_cols),one_hot],axis=1)\n\n\n    return df\n\n\n#check data status\ndef check_data(df):  \n    \n    #feature columns\n    feat_cols = df.drop(columns=['class','id']).columns\n    \n    #category columns\n    cat_cols = set([x if y=='object' else np.nan for x,y in zip(feat_cols,df[feat_cols].dtypes)])\n    cat_cols.remove(np.nan)\n    cat_cols = list(cat_cols)\n    cat_cols.sort()\n    \n    \n    print('### Null Value Counts ###')\n    print(df.isnull().sum())\n    \n    print('### Feature Summary ###')\n    for col in feat_cols:\n        display(pd.DataFrame(df[col].value_counts()).T)\n    \n    print('### Numerical Columns Summary ###')\n    df[list(num_cols)].describe()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:29.468638Z","iopub.status.idle":"2024-08-25T18:52:29.469236Z","shell.execute_reply.started":"2024-08-25T18:52:29.468913Z","shell.execute_reply":"2024-08-25T18:52:29.468964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Pre-process Data","metadata":{}},{"cell_type":"code","source":"train  = clean_data(train_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:03.157179Z","iopub.execute_input":"2024-08-25T18:52:03.157584Z","iopub.status.idle":"2024-08-25T18:52:29.449895Z","shell.execute_reply.started":"2024-08-25T18:52:03.157528Z","shell.execute_reply":"2024-08-25T18:52:29.446950Z"},"trusted":true},"execution_count":9,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[9], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m train  \u001b[38;5;241m=\u001b[39m \u001b[43mclean_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_df\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[8], line 65\u001b[0m, in \u001b[0;36mclean_data\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m     59\u001b[0m         df[col] \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mqcut(df[col],\u001b[38;5;241m7\u001b[39m,duplicates\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdrop\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     61\u001b[0m \u001b[38;5;66;03m#     for col in feat_cols:\u001b[39;00m\n\u001b[1;32m     62\u001b[0m \u001b[38;5;66;03m#         df[col],_ = pd.factorize(df[col],use_na_sentinel=True)\u001b[39;00m\n\u001b[0;32m---> 65\u001b[0m     one_hot \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_dummies\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[43mfeat_cols\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43mdummy_na\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43muint8\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     66\u001b[0m     df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mconcat([df\u001b[38;5;241m.\u001b[39mdrop(columns\u001b[38;5;241m=\u001b[39mfeat_cols),one_hot],axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m     69\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m df\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/reshape/encoding.py:214\u001b[0m, in \u001b[0;36mget_dummies\u001b[0;34m(data, prefix, prefix_sep, dummy_na, columns, sparse, drop_first, dtype)\u001b[0m\n\u001b[1;32m    210\u001b[0m     with_dummies \u001b[38;5;241m=\u001b[39m [data\u001b[38;5;241m.\u001b[39mselect_dtypes(exclude\u001b[38;5;241m=\u001b[39mdtypes_to_encode)]\n\u001b[1;32m    212\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m col, pre, sep \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(data_to_encode\u001b[38;5;241m.\u001b[39mitems(), prefix, prefix_sep):\n\u001b[1;32m    213\u001b[0m     \u001b[38;5;66;03m# col is (column_name, column), use just column data here\u001b[39;00m\n\u001b[0;32m--> 214\u001b[0m     dummy \u001b[38;5;241m=\u001b[39m \u001b[43m_get_dummies_1d\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    215\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcol\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    216\u001b[0m \u001b[43m        \u001b[49m\u001b[43mprefix\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpre\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    217\u001b[0m \u001b[43m        \u001b[49m\u001b[43mprefix_sep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msep\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    218\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdummy_na\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdummy_na\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    219\u001b[0m \u001b[43m        \u001b[49m\u001b[43msparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msparse\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    220\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdrop_first\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdrop_first\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    221\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    222\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    223\u001b[0m     with_dummies\u001b[38;5;241m.\u001b[39mappend(dummy)\n\u001b[1;32m    224\u001b[0m result \u001b[38;5;241m=\u001b[39m concat(with_dummies, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/reshape/encoding.py:250\u001b[0m, in \u001b[0;36m_get_dummies_1d\u001b[0;34m(data, prefix, prefix_sep, dummy_na, sparse, drop_first, dtype)\u001b[0m\n\u001b[1;32m    247\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mreshape\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mconcat\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m concat\n\u001b[1;32m    249\u001b[0m \u001b[38;5;66;03m# Series avoids inconsistent NaN handling\u001b[39;00m\n\u001b[0;32m--> 250\u001b[0m codes, levels \u001b[38;5;241m=\u001b[39m \u001b[43mfactorize_from_iterable\u001b[49m\u001b[43m(\u001b[49m\u001b[43mSeries\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    252\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(data, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m    253\u001b[0m     input_dtype \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mdtype\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/arrays/categorical.py:3042\u001b[0m, in \u001b[0;36mfactorize_from_iterable\u001b[0;34m(values)\u001b[0m\n\u001b[1;32m   3037\u001b[0m     codes \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39mcodes\n\u001b[1;32m   3038\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   3039\u001b[0m     \u001b[38;5;66;03m# The value of ordered is irrelevant since we don't use cat as such,\u001b[39;00m\n\u001b[1;32m   3040\u001b[0m     \u001b[38;5;66;03m# but only the resulting categories, the order of which is independent\u001b[39;00m\n\u001b[1;32m   3041\u001b[0m     \u001b[38;5;66;03m# from ordered. Set ordered to False as default. See GH #15457\u001b[39;00m\n\u001b[0;32m-> 3042\u001b[0m     cat \u001b[38;5;241m=\u001b[39m \u001b[43mCategorical\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mordered\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m   3043\u001b[0m     categories \u001b[38;5;241m=\u001b[39m cat\u001b[38;5;241m.\u001b[39mcategories\n\u001b[1;32m   3044\u001b[0m     codes \u001b[38;5;241m=\u001b[39m cat\u001b[38;5;241m.\u001b[39mcodes\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/arrays/categorical.py:460\u001b[0m, in \u001b[0;36mCategorical.__init__\u001b[0;34m(self, values, categories, ordered, dtype, fastpath, copy)\u001b[0m\n\u001b[1;32m    458\u001b[0m     values \u001b[38;5;241m=\u001b[39m sanitize_array(values, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[1;32m    459\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 460\u001b[0m     codes, categories \u001b[38;5;241m=\u001b[39m \u001b[43mfactorize\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msort\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    461\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    462\u001b[0m     codes, categories \u001b[38;5;241m=\u001b[39m factorize(values, sort\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/algorithms.py:795\u001b[0m, in \u001b[0;36mfactorize\u001b[0;34m(values, sort, use_na_sentinel, size_hint)\u001b[0m\n\u001b[1;32m    792\u001b[0m             \u001b[38;5;66;03m# Don't modify (potentially user-provided) array\u001b[39;00m\n\u001b[1;32m    793\u001b[0m             values \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mwhere(null_mask, na_value, values)\n\u001b[0;32m--> 795\u001b[0m     codes, uniques \u001b[38;5;241m=\u001b[39m \u001b[43mfactorize_array\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    796\u001b[0m \u001b[43m        \u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    797\u001b[0m \u001b[43m        \u001b[49m\u001b[43muse_na_sentinel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muse_na_sentinel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    798\u001b[0m \u001b[43m        \u001b[49m\u001b[43msize_hint\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msize_hint\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    799\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    801\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sort \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(uniques) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    802\u001b[0m     uniques, codes \u001b[38;5;241m=\u001b[39m safe_sort(\n\u001b[1;32m    803\u001b[0m         uniques,\n\u001b[1;32m    804\u001b[0m         codes,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    807\u001b[0m         verify\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    808\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/algorithms.py:595\u001b[0m, in \u001b[0;36mfactorize_array\u001b[0;34m(values, use_na_sentinel, size_hint, na_value, mask)\u001b[0m\n\u001b[1;32m    592\u001b[0m hash_klass, values \u001b[38;5;241m=\u001b[39m _get_hashtable_algo(values)\n\u001b[1;32m    594\u001b[0m table \u001b[38;5;241m=\u001b[39m hash_klass(size_hint \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(values))\n\u001b[0;32m--> 595\u001b[0m uniques, codes \u001b[38;5;241m=\u001b[39m \u001b[43mtable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfactorize\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    596\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    597\u001b[0m \u001b[43m    \u001b[49m\u001b[43mna_sentinel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    598\u001b[0m \u001b[43m    \u001b[49m\u001b[43mna_value\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mna_value\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    599\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmask\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmask\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    600\u001b[0m \u001b[43m    \u001b[49m\u001b[43mignore_na\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muse_na_sentinel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    601\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    603\u001b[0m \u001b[38;5;66;03m# re-cast e.g. i8->dt64/td64, uint8->bool\u001b[39;00m\n\u001b[1;32m    604\u001b[0m uniques \u001b[38;5;241m=\u001b[39m _reconstruct_data(uniques, original\u001b[38;5;241m.\u001b[39mdtype, original)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"col_list = list(train.columns)","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:29.451185Z","iopub.status.idle":"2024-08-25T18:52:29.451633Z","shell.execute_reply.started":"2024-08-25T18:52:29.451417Z","shell.execute_reply":"2024-08-25T18:52:29.451434Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:29.453129Z","iopub.status.idle":"2024-08-25T18:52:29.453696Z","shell.execute_reply.started":"2024-08-25T18:52:29.453410Z","shell.execute_reply":"2024-08-25T18:52:29.453434Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from sklearn.model_selection import train_test_split\n# trainX,testX,trainY,testY = train_test_split(train.drop(columns=['class']),train['class'],test_size=0.2,shuffle=True,stratify=train['class'])","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:29.455523Z","iopub.status.idle":"2024-08-25T18:52:29.456107Z","shell.execute_reply.started":"2024-08-25T18:52:29.455796Z","shell.execute_reply":"2024-08-25T18:52:29.455819Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Neural Network Model","metadata":{"execution":{"iopub.status.busy":"2024-08-20T05:04:36.505765Z","iopub.execute_input":"2024-08-20T05:04:36.506156Z","iopub.status.idle":"2024-08-20T05:04:40.816341Z","shell.execute_reply.started":"2024-08-20T05:04:36.506125Z","shell.execute_reply":"2024-08-20T05:04:40.815203Z"}}},{"cell_type":"code","source":"import tensorflow as tf\n\ndef get_model():\n    model = tf.keras.Sequential()\n    model.add(tf.keras.Input(shape=(trainX.shape[1],)))\n    model.add(tf.keras.layers.Dense(512,activation='relu'))\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Dense(512,activation='relu'))\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Dense(512,activation='relu'))\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n    model.compile(loss='BinaryCrossentropy', optimizer=tf.keras.optimizers.Adam(learning_rate=0.00005), metrics=['accuracy'])\n# model.compile(loss='BinaryCrossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n# model = get_model()\n# model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:52:29.458258Z","iopub.status.idle":"2024-08-25T18:52:29.458820Z","shell.execute_reply.started":"2024-08-25T18:52:29.458539Z","shell.execute_reply":"2024-08-25T18:52:29.458562Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# #Train Model\n# hist = model.fit(trainX,trainY,epochs=30,batch_size=256,validation_split=0.2,callbacks=[tf.keras.callbacks.EarlyStopping(patience=3,monitor='val_loss')])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Cross Validation","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedKFold\n\nskfold = StratifiedKFold(n_splits=2,shuffle=True, random_state=123)\nX=train.drop(columns=['class'])\nY=train['class']\n\nmodel_list=[]\nscore_list=[]\n\nfor fold,(train_id,test_id) in enumerate(skfold.split(X,Y)):\n    trainX, trainY = X.iloc[train_id, :], Y[train_id]\n    testX, testY = X.iloc[test_id, :], Y[test_id]\n    model = get_model()\n    model.fit(trainX,trainY,epochs=30,batch_size=256,validation_split=0.2,callbacks=[tf.keras.callbacks.EarlyStopping(patience=2,monitor='val_loss')])\n    predY = model.predict(testX)\n    predY = [0 if x<=0.5 else 1 for x in predY]\n    mcc_score = matthews_corrcoef(testY,predY)\n    model_list.append(model)\n    score_list.append(mcc_score)\n    print(f\"--- Fold {fold+1} MCC Score: {mcc_score:.6f}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-25T18:04:17.359629Z","iopub.execute_input":"2024-08-25T18:04:17.360377Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Epoch 1/30\n\u001b[1m4871/4871\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 17ms/step - accuracy: 0.9220 - loss: 0.1820 - val_accuracy: 0.9910 - val_loss: 0.0401\nEpoch 2/30\n\u001b[1m4871/4871\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 17ms/step - accuracy: 0.9898 - loss: 0.0448 - val_accuracy: 0.9917 - val_loss: 0.0377\nEpoch 3/30\n\u001b[1m4871/4871\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 17ms/step - accuracy: 0.9910 - loss: 0.0413 - val_accuracy: 0.9921 - val_loss: 0.0369\nEpoch 4/30\n\u001b[1m4871/4871\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 17ms/step - accuracy: 0.9913 - loss: 0.0401 - val_accuracy: 0.9922 - val_loss: 0.0365\nEpoch 5/30\n\u001b[1m4871/4871\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 17ms/step - accuracy: 0.9915 - loss: 0.0391 - val_accuracy: 0.9923 - val_loss: 0.0362\nEpoch 6/30\n\u001b[1m4871/4871\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 17ms/step - accuracy: 0.9920 - loss: 0.0377 - val_accuracy: 0.9922 - val_loss: 0.0364\nEpoch 7/30\n\u001b[1m4541/4871\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m5s\u001b[0m 16ms/step - accuracy: 0.9918 - loss: 0.0379","output_type":"stream"}]},{"cell_type":"markdown","source":"# Evaluate Model","metadata":{}},{"cell_type":"code","source":"# y_pred_raw = model.predict(testX)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from sklearn.metrics import matthews_corrcoef\n# y_pred = [0 if x<=0.5 else 1 for x in y_pred_raw]\n# matthews_corrcoef(testY,y_pred)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# cf = confusion_matrix(testY, y_pred)\n# sns.set_context('talk')\n# disp = ConfusionMatrixDisplay(confusion_matrix=cf)\n# disp.plot()\n# plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Submission","metadata":{}},{"cell_type":"code","source":"#pre-process data\ntest = clean_data(test_df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred =[]\nfor model in model_list:\n    pred.append(model.predict(test.drop(columns=['id'])))\n    \n    ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sub = pd.DataFrame(test_pred,index=test['id'],columns=['class'])\nsub['class'] = sub['class'].apply(lambda x : 'e' if x <= 0.5 else 'p')\nsub.to_csv('submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-25T15:42:52.589139Z","iopub.execute_input":"2024-08-25T15:42:52.589536Z","iopub.status.idle":"2024-08-25T15:42:54.618039Z","shell.execute_reply.started":"2024-08-25T15:42:52.589504Z","shell.execute_reply":"2024-08-25T15:42:54.616794Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"!head submission.csv","metadata":{"execution":{"iopub.status.busy":"2024-08-25T15:42:54.619635Z","iopub.execute_input":"2024-08-25T15:42:54.619996Z","iopub.status.idle":"2024-08-25T15:42:55.752085Z","shell.execute_reply.started":"2024-08-25T15:42:54.619966Z","shell.execute_reply":"2024-08-25T15:42:55.750290Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"id,class\n3116945,e\n3116946,p\n3116947,p\n3116948,p\n3116949,e\n3116950,e\n3116951,e\n3116952,p\n3116953,p\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}